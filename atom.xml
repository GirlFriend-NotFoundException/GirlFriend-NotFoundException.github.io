<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>曾是惊鸿照影来</title>
  
  <subtitle>Stay Hungry, Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="www.girlfriendnotfoundexception.com/"/>
  <updated>2019-07-15T08:40:00.440Z</updated>
  <id>www.girlfriendnotfoundexception.com/</id>
  
  <author>
    <name>高槻泉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Broadcast</title>
    <link href="www.girlfriendnotfoundexception.com/Broadcast/"/>
    <id>www.girlfriendnotfoundexception.com/Broadcast/</id>
    <published>2019-07-15T06:43:45.000Z</published>
    <updated>2019-07-15T08:40:00.440Z</updated>
    
    <content type="html"><![CDATA[<p>android BroadCast<br><img src="/images/pg.jpg" alt></p><a id="more"></a><p>#Broadcast定义<br>    broadcast是android四大组件之一，是一种全局监听器用于监听全局的广播信息，系统的大部分都是以广播的形式发布，比如开机完成的消息，收到短信的消息，电话打进打出的消息等等。<br>    ex：<br>    Android系统每次启动就会向外广播一条信息，告诉所有人启动完成。只有继承了Broadcast的类能够捕捉到这些系统消息，这些消息相当于指令，这些类的内部会有相应的逻辑代码执行操作。</p><p>#实现自定义广播</p><p>##广播种类<br>    发送自定义广播，这种广播有两种形式。<br>    第一种是标准广播(普通广播)，另一种是有序广播。<br>    标准广播：不能够中断，所有监听这个广播的广播监听器都能接收到消息，相当于发散源一样，或者说服务器。<br>    有序广播：通过设置优先级来控制优先级不同的广播接收器来处理数据。优先级高的可以通过abortBroadcast()这个方法来决定是否传递给下一个广播接收器。</p><p>##发送广播</p><p>###创建广播发送者<br>    1.创建Intent，用于启动Broadcast。intent.setaction(“指定广播的频率，一般是包名+ACTION”),我们使用了intent.就可以发送一些数据等等，<br>    还可以采用bandle发送多组数据。<br>    2.调用sendBroadcast()或者sendOrderBroadcast()方法启动指定的广播<br>    前者是标准的，后者是有序的根据优先级决定。<br>    发出intent以后所有匹配该intent的broadcast都可能会被启动</p><p>###创建广播接受者<br>    1.写一个继承自BroadcastReceiver的类<br>    2.重写onreceive的方法。获取发来的消息即可。<br>    3.发送广播之前我们需要注册一个广播接受者，这个注册有两种方式。<br>    (1)静态注册<br>    静态注册我们需要在Androidmanifest文件里面注册，<br>    1.在&lt;application节点中添加一个receiver节点，<br>    2.在receiver节点里面添加一个android：name属性，值为你创建的类名<br>    3.添加<intent-filter>节点，在里面添加action节点，并指定其值，该值相当于广播的频率。<br>    (2)动态注册<br>    在应用程序启动时注册,退出时一定要将广播注销。<br>    一定在ondestroy方法里注销<br>    注册：registerReciever(reciever,filter);<br>    注销：unregisterReciever(reciever);</intent-filter></p><p>##使用本地广播<br>    上面两种的发送广播接收广播是属于全局广播，发出去的广播可以被任何应用程序接收到，也可以接收来自其他任何应用程序的广播。因此引发了一些安全问题，比如说我们发送的一些关键性数据的消息被其他应用程序截获，或者是有其他的应用程序一直给我们的广播接收器一直发送垃圾消息等。<br>    android本地广播机制由此而生，只能在应用程序内部进行传递，也只能接收内部传发来的消息。<br>    用法：和我们的动态注册广播接受者差不多。不过这里要多使用一个本地广播管理器即LocalBroadcastMannger，在广播初始化的时候首先要获得它的实例 ex： LocalBroadcastMannger localBroadcastMannger = LocalBroadcastMannger.getInstance(this)；<br>    接下来就和动态注册差不多了。和动态注册的步骤相同的地方都需要使用<br>    localBroadcastMannger来调用相应的方法即可。包括发送消息,注册接收者,注销接收者。</p><p>#注意事项<br>    Broadcast的执行和activity以及service一样都是由android的main主线程执行的    ，在广播接收者中是不允许开启线程，所有我们不能在onRecieve方法里面添加过多的逻辑和耗时操作。这个onRecieve方法被限定在10以内超过时间后就会报错，ANR(application Not Response)异常</p><p>#系统广播<br>    这个有很多,要用的时候去查一下就好。    </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;android BroadCast&lt;br&gt;&lt;img src=&quot;/images/pg.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>activity和intent</title>
    <link href="www.girlfriendnotfoundexception.com/activity%E5%92%8Cintent/"/>
    <id>www.girlfriendnotfoundexception.com/activity和intent/</id>
    <published>2019-06-28T07:07:55.000Z</published>
    <updated>2019-06-29T02:59:48.702Z</updated>
    
    <content type="html"><![CDATA[<p>#android培训activity和intent</p><a id="more"></a><p>#activity</p><p>##概述 状态 生命周期<br> 概述：表示手机的一屏,一个页面。<br> 状态：四种状态<br>        run pause stop destroy<br>        Log.(i,e,w,等)可用来输出日志信息</p><p>##创建 配置 启动 关闭 activity<br> 重创建到销毁activity一共要执行六个方法，方法如下图：<br> <img src="/images/activity.jpg" alt></p><p>###创建activity<br>    我们在 java代码里面创建一个新的activity文件。这个activity是继承我们的默认的activity的。一般我们在里面重写oncreat方法，在方法里面通过setcontentview加上layout的资源文件来设置我们要显示的视图.</p><p>###注册activity<br>    只有给我们自定义的activity注册以后我们才能使用这个activity。<br>    否则一般就会报activitynotfoundexception这个错误。<br>    注册activity：我们在manifest里面application包裹下，使用<br>    <activity>里面指定一个name属性<activity></activity></activity></p><pre><code>当然以上的创建和注册太过于麻烦，我们可以通过创建activity的向导来创建,new activity empty activity 就可以实现as为我们自动创建一个activity加上它的xml文件并且完成了自动注册activity。</code></pre><p>###启动和关闭activity<br>    启动时,一个activity有两种方式。第一种是将其作为入口activity，第二种是作为其他activity.<br>    入口activity：我们需要在manifest文件里面配置为程序的入口<br>    <activity android:name=".MainActivity"><br>            <intent-filter>//这个是intent过滤器接下来会讲<br>                <action android:name="android.intent.action.MAIN"><br>                action标记是用来指定响应的动作名，后面的Main是一个action的常量，用来指定activity为程序的主启动项</action></intent-filter></activity></p><pre><code>            &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;            category表示分类也是使用了它的一个常量        &lt;/intent-filter&gt;    &lt;/activity&gt;入口activity只适用于只有一个activity时，有多个activity时我们要采用第二种方法。采用startactivity()方法来启动，一般是在一个activity里面启动另一个activity。我们需要创建一个intent对象，new intent里面的参数是(mainactivity.this,要启动的activity)start(intent)即可。关闭activity为一个组件添加  finish() 即可，可以关闭一个activity</code></pre><p>###多个activity的使用<br>    很多个activity使用一般都是相互传递数据，由于intent不具备保存数据的功能，所以我们采用了Bundel来保存数据，它就相当于传递数据的工具，intent就相当于一个包装。通过这个Bundle快递小哥将我们的数据在各个activity之间进行交换。<br>    bundle：是一个key和value的一个组合，可以通过key来获取其value的值<br>    主要进行如下：<br>            数据(date)—通过put+数据类型,传递给bundle，intent使用<br>            putextrass()将bundle保存里面 ，再调用startactivity即可。</p><p>#intent<br>    intent的六大属性：<br>            Component name 这个属性主要是用来调用调用满足这些intent信息的组件</p><pre><code>Action表示一些intent的执行的动作属性，在api文档中有一个intent的源文件里面有很多的属性我们可以根据自己的需要选择。data/type，可以用Uri 来做为data，比如Uri uri = Uri.parse(“http://blog.csdn.net/sunboy_2050”);Intent i = new Intent(Intent.ACTION_VIEW, uri); 手机的Intent分发过程中，会根据“http://blog.csdn.net/sunboy_2050” 的scheme判断出数据类型type。手机中安装的所有Brower都能匹配它,在Brower的Manifest.xml中的IntenFilter中首先有ACTION_VIEW 的Action能处理http的typeCategory分类，一般不要去在Intent中设置它,如果你写Intent的接收者就在Manifest.xml的Activity的 IntentFilter中包含android.category.DEFAULT，这样所有不设置 Category（Intent.addCategory(String c);）的Intent都会与这个Category匹配。extras 附加信息，是其它所有附加信息的集合。使用extras可以为组件提供扩展信息，比如，如果要执行“发送电子邮件”这个动作，可以将电子邮件的标题、正文等保存在extras里，传给电子邮件发送组件。    flags </code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#android培训activity和intent&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Source</title>
    <link href="www.girlfriendnotfoundexception.com/Source/"/>
    <id>www.girlfriendnotfoundexception.com/Source/</id>
    <published>2019-06-27T03:53:57.000Z</published>
    <updated>2019-06-27T07:31:31.637Z</updated>
    
    <content type="html"><![CDATA[<p>#安卓资源<br><img src="/images/chatu.jpg" alt></p><a id="more"></a><p>##res目录<br>  这个android的source主要是在res目录下的values.这个目录里面也有很多的资源文件比如string字符串的资源文件，color的颜色资源文件，dimens的尺寸资源文件，数组，image，theme，menu，layout资源文件等文件，有些在默认添加的时没有添加出来需要我们自己手动添加。</p><p>一情况下使用这些资源文件都有两种方式，一种是在xml布局文件里面使用，另一种是在java代码里面使用。这个需要根据需要去判断。</p><p>##String字符串<br>   一般我们的使用这个就是想显示一些文字,一般在xml里面使用文本框组件显示文字都是使用text属性后面直接打文字。我们使用字符串资源,现在string.xml里面先定义好我们的字符串。<br>   <resources><br>    <string name="字符串名字">字符串想要显示的内容</string><br>   </resources><br>   1.在xml布局文件使用字符串资源然后我们在xml里面的组件就可以通过<br>   @string/字符串名字 这样来调用这个属性。<br>   2.在java代码中来使用字符串资源,首先要找到这个组件，通过其<br>   settext.getsource.getstring(R.string.字符串名字)<br>   注：在java代码中使用字符串资源的大致方式都是如此。<br>           组件id+set(资源)+getsource.get(资源)(R.资源.资源id)</p><p>##color颜色<br>    这个需要注意在java代码中使用时，获取资源可以不用写getsource，但是这个要求android SDK版本最先在23以上。我们可以在project-build gradle里面修改。</p><p>##dimens尺寸资源<br>    这个尺寸资源分为 sp 和 dp<br>    sp为可伸缩的像素一般是用来设置我们的字体的大小的settextsize使用。<br>    dp设备独立像素在不同的手机下显示不同，一般用于设置边距，组件的大小的。</p><p>##布局资源<br>    这个在java代码里十分常见<br>     setContentView(R.layout.activity_main);这里就是使用了默认的activity布局文件<br>     在xml文件里使用这个布局资源一般是在一个布局资源里面去使用另一个<br>     <include layout="@layout/布局资源名称"></include></p><p>##数组资源<br>    这里有三种数组资源子元素，分别是<br>    &lt;array普通类型的数组资源,普通的意思是它包含了颜色，尺寸，字符串这些资源。<br>    <integer-array>是一个整型的数组<br>    <string-array>是一个字符串的数组。<br>    在定义这些数组时都是名字加显示的内容，其中内容是用item这个子标记实现。 </string-array></integer-array></p><p>##drawable图像<br>    1.这里主要说明9patch图片 .9.png后缀<br>    制作这种图片，应为SDK版本问题有些可能没有draw8patch.bat这个应用程序。<br>    在android3.0以上直接点击导入的图片,图片-&gt;右键-&gt;create 9-patch file，其中要注意的是：1、将9-patch图保存到drawable目录下才管用。2、要将背景图片处理一下，缩放到足够小，它会自动伸缩<br>    2.statelistdrawable状态列表资源<br>    根据状态呈现不同的图像<br>    在drawable里面新建一个drawable资源文件<br>    <selector xmlns:android="http://schemas.android.com/apk/res/android"><br>    <item android:state_focused="true" android:color="#F60"><br>    <item android:state_focused="false" android:color="#0a0"><br>    </item></item></selector><br>    其中state_focused这个 state里面有很多属性 focused表示得到或者失去焦点 后面的这个color表示改变的颜色<br>    state_enabled true or false 表示是否可用<br>    注：drawable和mipmap的区别是放的图片的作用不一样。<br>    一般来说mipmap放置应用程序启动的图标<br>    drawable放一些图片文件9 patch图片 shape statelistdrawable</p><p>##theme主题(在styles里面)<br>    可以在design里面的APPtheme里面设置主题，这些都是我们的系统自带的主题。<br>    自定义主题资源文件,<br>    <style name="主题名字" parent="@style.APPtheme">这个parent表示继承基本应用的主题<br>        &lt;item name  实现自定义的主题配置<br>    </style><br>    使用这个自定义的主题，1在xml里面使用，打开AndroidManifest.xml<br>    在这里更改主题名称即可android:theme=”@style/主题名称”&gt;<br>    2.在java文件里面使用在setcontentview前面设置settheme通过R.style指定主题名字就可以</p><p> ##样式资源<br>     这个的作用就是有些相同的东西，我们可以以一类一类的来设置。<br>     同样在styles里面创建。主题是用来设置整个app或者整个窗口风格的，而这个样式是用来设置组件显示的样式的。<br>     使用时一般都在xml布局文件里面使用，注意使用时使用style时没有Android前缀。</p><p> ##menu菜单资源<br>     点击一个菜单会出现一些选项，或者长按图片的时候有功能选项</p><p> ###选项菜单<br>     手动创建一个menu，在里面使用item创建菜单项。<br>     重点是指定各个菜单项被选择是要做的处理，<br>     在Java代码里添加选项菜单,需要重写oncreatoptionmenu()方法，在里面来通过定义一个Menuinflater对象来解析我们的菜单资源文件<br>     inflate解析。<br>     再重写onoptionitemselected是否被选中的方法,选中了通过intent来进行页面跳转。</p><p>###上下文菜单<br>    1为组件注册上下文菜单<br>    2添加上下文菜单<br>    3指定菜单项被选择时要做的处理</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#安卓资源&lt;br&gt;&lt;img src=&quot;/images/chatu.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android之布局和控件</title>
    <link href="www.girlfriendnotfoundexception.com/Android%E4%B9%8B%E5%B8%83%E5%B1%80%E5%92%8C%E6%8E%A7%E4%BB%B6/"/>
    <id>www.girlfriendnotfoundexception.com/Android之布局和控件/</id>
    <published>2019-06-24T06:32:33.000Z</published>
    <updated>2019-07-15T08:45:03.121Z</updated>
    
    <content type="html"><![CDATA[<p>#布局和控件</p><a id="more"></a><p>#布局管理器<br>     7种常见的布局管理器<br>   relativelayout（相对布局）<br>   linearlayout（线性布局）<br>   framelayout（帧布局）<br>   tablelayout（表格布局）<br>   absolulayout（绝对布局）<br>   gridlayout（网格布局）<br>   android.support.constraint.ConstraintLayout<br>   各种布局管理器都有各自的好处和不足，最后一种布局是android studio3.0以上的一种新布局方式，过几天研究研究.</p><p>##Relativelayout（相对布局）<br>     相对布局顾名思义它是相对的，有一个参考点的。这个参考点一般来自于父容器和兄弟容器。它的关键在于我们要根据各个组件之间的位置关系控制组件的摆放。<br>     组件布局属性：<br>     android gravity(设置布局管理器各子组件的摆放方式)参数是表示方位的词。<br>    android ignoreGravity（设置某个组件不受前面的属性的影响）<br>    要写上不受影响的id,没有id的话设置一个id<br>    layout_above(上方) lay_toleftof(左边)等等设置组件相对于参考组件的位置<br>    align：对齐<br>    layout_alignParentBottom等等来设置组件和父容器的对齐方式，属性值为Boolean true才行<br>    layout_alignBottom等等设置某一组件和一个组件对齐方式<br>    layout_centerhorizontal组件位于布局管理器水平中间位置<br>    layout_centerinparent中间位置  vertical垂直居中</p><p>##Linearlayout（线性布局）<br>    布局属性：<br>    vertical纵向的叫做垂直线性布局管理器<br>    horizontal横向的叫做水平线性布局管理器<br>    组件布局属性：<br>    gravity：显示组件的位置，可以把表示方向的词组合在一起,<br>    如：gravity=“top|center” 表示顶上居中<br>    layout_weight属性，设置组件所占的权重,默认值为0,组件分配剩余空间<br>    diver(分割线)</p><p>##Framelayout（帧布局）<br>    这种布局表示默认在屏幕的左上角层层叠加,用来显示叠加的内容,这些内容还可以拖动<br>    布局属性：<br>    foreground：用于为当前的布局管理器设置一个前景图像(src图像资源)<br>    foregroundGravity设置前景图像的位置<br>    前景图像：始终位于最上层的图像，不能被其他图像盖住</p><p>##Tablelayout（表格布局）<br>    表格布局和后面的网格布局差不多，不过网格布局更好用。<br>    布局属性：<br>    collapseColumns（可以用来隐藏某一列或者几列，填入我们要隐藏的列数字之间用逗号隔开）</p><pre><code>stretchColumns stretch拉伸当我们某一列不能显示出来的时候可以自动拉伸用来显示我们的的数据,参数也是填入想要的列数即可。Tablelayout类以行和列的形式对控件进行管理，每一行为一个TableRow对象，或一个View控件。         当为TableRow对象时，可在TableRow下添加子控件，默认情况下，每个子控件占据一列。 &lt;/TableRow&gt;里面可以添加一些组件如&lt;EditText  &lt;TextView等等&lt;TableRow&gt;        当为View时，该View将独占一行。</code></pre><p>##Gridlayout（网格布局）<br>    比我们的表格布局管理器更灵活，可以跨列或者跨行，超出容器的组件会自动换行.<br>    布局属性：<br>    columcount （最大列数）<br>    orientation（组件的排列方式）<br>    rowcount（最大行数）<br>    组件属性：<br>    layout_column指定子组件位于网格的第几列<br>    layout_columnSpan指定子组件横向跨几列<br>    layout_columnWeight权重<br>    layout_Grivity指定子组件的位置<br>    layout_row指定子组件位于网格的第几行<br>    layout_rowspan纵向跨几列<br>    layout_rowWeight权重</p><p>##布局管理器的嵌套<br>    原则1：根布局管理器必须包含xmlns属性<br>    原则2：在一个布局文件中最多只有一个根布局管理器，如果需要有多个还需要使用另外一个布局管理器将他们括起来，而另外一个才是根布局管理器<br>    原则3：不能嵌套太深,影响速度</p><p>#基本UI组件</p><p>##文本类组件</p><p>###文本框组件TextView<br>    颜色 textcolor 字体 textsize 设置单行 singleline<br>    字符串资源  在res的values下的strings里面 这里可以提前设置好我们需要使用的，通过@string/字符串的名字调用即可<br>    <a href="https://www.cnblogs.com/plokmju/p/Android_UI_TextView.html" target="_blank" rel="noopener">https://www.cnblogs.com/plokmju/p/Android_UI_TextView.html</a><br>    在博客园看到一片文章讲的很好这里直接引用过来。</p><p>###编辑框组件EditText<br>    hint：属性添加文本框提示内容<br>    inputType：设置密码,密码框里面有只能输入数字或者字母。<br>    drawable(+方位如：Left)属性是一张图片,在编辑框的指定位置添加图片<br>    注：drawableleft=drawablestart（最好使用这个）<br>    drawablepadding:用来设置图片和编辑框的距离<br>    lines:用来设置我们的编辑框的行数（输入文字）这个是显示的行数，超过这个行数可以拖动<br>    getText(）:获取我们输入的文本信息<br>        (在Mainactivity里面获取),提前指定一个id，在main里面new 一个<br>            EditText的类通过findviewbyid这个方法找到就可以使用了。</p><p>###图形视图组件imageview:<br>    scaleType：可以用来拉伸我们的图片让他充满，整个界面如：fitxy<br>    以后再补充</p><p>##按钮类组件</p><p>###图片按钮imagebutton<br>    完全透明的背景：#0000<br>    添加图片src<br>    改变图片的透明度：image.setimagealpha</p><p>###单选按钮RadioButton<br>    使用其text可以给按钮添加文字<br>    单选按钮只有选中和不选中两种状态，true  false<br>    但是我们使用RadioButton一个一个是不能构成选项的，这些选项之间是无关的。我们通过RadioGroup将我们的多个单选按钮包裹在其中就能实现真正的单选。<br>    例：&lt;RadioGroup<br>            <radiobutton><br>            <radiobutton><br>        </radiobutton></radiobutton></p><p>###复选框checkbox(复选)<br>    直接添加即可。</p><p>###日期选择器DatePicker会出现一个日历</p><p>###时间选择器TimerPicker会出现一个时钟<br>    setIs24HourView(true)，改变默认12小时制为24小时制</p><p>###计时器Chronometer<br>    setBase(）设置起始时间<br>    setFormat(）设置时间格式<br>    start() 指定开始计时<br>    stop(）指定停止计时</p><p>##高级UI组件</p><p>###进度条组件ProgressBar<br>    使用它来提示程序进行的进度,进度条有两种。一种是水平的，还有一种圆形的。默认设置为圆形的。<br>    从官方文档上看，为了适应不同的应用环境，Android内置了几种风格的进度条，可以通过Style属性设置ProgressBar的风格。支持如下属性<br>    @android:style/Widget.ProgressBar.Horizontal：水平进度条（可以显示刻度，常用）。<br>    @android:style/Widget.ProgressBar.Small：小进度条。<br>    @android:style/Widget.ProgressBar.Large：大进度条。<br>    @android:style/Widget.ProgressBar.Inverse：不断跳跃、旋转画面的进度条。<br>    @android:style/Widget.ProgressBar.Large.Inverse:不断跳跃、旋转动画的大进度条。<br>    @android:style/Widget.ProgressBar.Small.Inverse：不断跳跃、旋转动画的小进度条。<br>    只有Widget.ProgressBar.Horizontal风格的进度条，才可以设置进度的递增，其他的风格展示为一个循环的动画，而设置Widget.ProgressBar.Horizontal风格的进度条，需要用到一些属性设置递增的进度，这些属性都有对应的setter、getter方法，这些属性如下：<br>    android:max：设置进度的最大值。<br>    android:progress:设置当前第一进度值。<br>    android:secondaryProgress：设置当前第二进度值。<br>    android:visibility：设置是否显示，默认显示。</p><p>###拖动条组件seekbar间接继承ProgressBar,与进度条类似<br>    因为SeekBar涉及到一个滑块的概念，所以新增了属性android:thumb来通过设置一个Drawable(图像资源)对象，指定自定义滑块的外观，当然如果不设定也可以默认使用Android自带的风格。</p><p>###星级评分控件RatingBar<br>    RatingBar通过星形图标来表示进度。<br>    android:isIndicator:设置是否允许用户修改，true为不允许，<br>    默认为false允许。<br>    android:numStars:设置评分控件一共展示多少个星星，默认5个。<br>    android:rating:设置初始默认星级数。<br>    android:stepSize:设置每次需要修改多少个星级(默认为0.5)通过给stepsize赋值可以修改每次修改多少颗星星</p><p>##图像类组件</p><p>###图像视图(imageview)<br>    1.显示图片 使用前凡在drawable里面，使用时用src属性设置即可<br>    2.对图片设置高宽对图像缩放是等比例缩放的。我们使用scaletype不是等比例缩放的，它可以占满整个imageview，但是图像会被拉伸<br>    scaletype属性里面有很多的用法<br>    设置高宽的： adjustviewbounds指定是否调整自己的边界<br>    (true/false）<br>    高和宽的最大值：maxwidth/maxhigth<br>    着色属性：tint</p><p>##列表类组件</p><p>###下拉列表框<br>    有两种方式来指定列表项。<br>    第一种是通过entries属性，这个需要在value里面创建数组资源。<br>    android:entries=”@array/ctype”获取即可。<br>    第二种在mainactivity里面通过适配器来指定。由于我们指定的是date符合字符串数组，所以我们使用arrayadapter数组类型的适配器。<br>    首先在MainActivity里面声明一个字符串数组，生成我们的内容。<br>    然后声明我们的ArrayAdapter。<br>    ArrayAdapter<string> adapter=new ArrayAdapter<string>(this,android.R.layout.simple_spinner_item,ctype);<br>    第一个参数是一个上下文对象，第二个参数是spinner的样式，我们采用android自带的样式，第三个参数是我们的字符串数组。<br>    最后声明一个Spinner获取布局文件的Spinner，调用setadapter的方法把我们的适配器添加进去。</string></string></p><p>###列表视图listview<br>    一般我们把高度和宽度都设置为与父容器相同。<br>    同样我们指定选项的内容可以通过entries属性，也可以通过适配器。</p><p>###滚动视图ScrollView<br>    第一种方法在布局文件里面创建滚动视图<br>    在滚动视图里面还可以添加一些组件，如常见的文本框组件，当文字一屏显示不下的时候，就可以使用滚动条了。<br>    注：这个默认是竖直方向滚动的。<br>    水平方向滚动horizontalscrollview实现左右水平的滚动<br>    注：一个滚动视图只能放一个组件，当要放置多个组件时，我们必须要使用布局管理器把它们括起来<br>    第二种方法在java文件创建滚动视图，</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#布局和控件&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android开始之路</title>
    <link href="www.girlfriendnotfoundexception.com/hello-world/"/>
    <id>www.girlfriendnotfoundexception.com/hello-world/</id>
    <published>2019-06-17T07:00:14.530Z</published>
    <updated>2019-06-27T07:31:36.902Z</updated>
    
    <content type="html"><![CDATA[<p>#准备工作<br><img src="/images/xmbd.jpg" alt></p><a id="more"></a><p>##安装Android studio<br>  安装这一块，可以说这个Android studio是超级麻烦的，在csdn上找了很多教程，各种各样的都有，试了几次。最后还是在b站上找了一个视频教学。博主叫做孙老师非要尬聊，这个博主的视频还是做得不错的，这个是安装的视频教程：<br>  <a href="https://www.bilibili.com/videoav35319198" target="_blank" rel="noopener">https://www.bilibili.com/videoav35319198</a><br>  安装出错的同学可以去看看，很详细的。所以安装这个是有点麻烦，所以大家一定要有耐心，好的开头是很重要的。<br>  <img src="/images/android01.jpg" alt><br>  当我们看到这个绿色的run按亮起来时就都差不多了。</p><p>##创建一个hello world项目<br>  接下来我们就开始创建项目吧！创建一个程序界最最喜欢的入门代码，<br>  hello world。<br>  第一步，点击左上角的file，new一个module。接下来选择手机phone和平板Tablet。这个表示所要运行程序的场景。next，然后在接下来的界面第一行就是项目名称了,随便取。第二行module名称这里要注意我们只能填写英文,不能有汉字.<br>  第三行是我们的包名,不用太管他。以后如果要找源文件就去这里面找就可以了.<br>  最后一行是Minimun SDK最小的sdk版本一般我们都是设置它高于API 15以上。<br>  next，接下来选择一个activity，这里android studio会提供很多的模板，我们就选择一个Empty activity就可以了。</p><p>  第二步，然后就是android studio 帮你创建项目了。这里我们主要是要看到res目录下的layout布局文件中的activity——main.xml。这个是布局，我们的样式，还有一个在java里面，第一个文件夹下面有一个Mainactivity.java的文件。打开后发现里面有一个Mainactivity的class继承了一个activity。并且重写了一个oncreat方法。里面的这个代码：<br>  setContentView(R.layout.activity_main);就是选择了一种布局方式，是默认的布局方式，当然后面我们可以自己写布局，自己设置。<br>  然后我们要运行程序了，点击之前那个绿色的run按钮，接下来就要选择一个虚拟机，至于虚拟机是啥现在不需要了解，要是没有虚拟机也要紧创建一个就是啦！接下来就是选择手机或者平板的显示尺寸的，好像是选择2.7的吧！无所谓的大一点小一点都可以next创好以后。选择刚刚的AVD,acd是创建虚拟机是给他的命名。点击ok等待片刻即可。<br>  <img src="/images/android02.jpg" alt><br>  这个hello world 程序就完成了！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#准备工作&lt;br&gt;&lt;img src=&quot;/images/xmbd.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
